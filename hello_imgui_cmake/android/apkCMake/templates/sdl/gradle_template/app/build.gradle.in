def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

android {
    if (buildAsApplication) {
        namespace "@apkCMake_applicationIdUrlPart@.@apkCMake_applicationIdNamePart@"
    }

    compileSdkVersion 34
    // compileSdkVersion @apkCMake_compileSdkVersion@

    // ndkVersion @apkCMake_ndkVersion@

    defaultConfig {
        minSdkVersion 19
        // minSdkVersion @apkCMake_minSdkVersion@
        targetSdkVersion 34
        // targetSdkVersion @apkCMake_targetSdkVersion@

        //versionCode 1
        versionCode @apkCMake_versionCode@
        //versionName "1.0"
        versionName "@apkCMake_versionName@"

        externalNativeBuild {
            // cmake {
            //    arguments "-DANDROID_APP_PLATFORM=android-19", "-DANDROID_STL=c++_static"
            //    // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //    abiFilters 'arm64-v8a'
            //}
            cmake {
                arguments "-DANDROID_APP_PLATFORM=@apkCMake_androidAppPlatform@", "-DANDROID_STL=c++_shared"
                abiFilters @apkCMake_abiFilters@
            }
        }

    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            cmake {
                path 'jni/CMakeLists.txt'
            }
        }
       
    }
    lint {
        abortOnError false
    }
    
    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "@apkCMake_applicationIdUrlPart@.@apkCMake_applicationIdNamePart@.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}
